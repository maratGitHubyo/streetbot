package org.example;

import api.longpoll.bots.LongPollBot;
import api.longpoll.bots.exceptions.VkApiException;
import api.longpoll.bots.methods.impl.messages.GetConversationMembers;
import api.longpoll.bots.model.events.messages.MessageNew;
import api.longpoll.bots.model.objects.basic.Message;
import api.longpoll.bots.model.objects.basic.User;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

public class StreetBot extends LongPollBot {

    private final List<String> citiesInGame = new LinkedList<>();

    @Override
    public void onMessageNew(MessageNew messageNew) {
        try {
            Message message = messageNew.getMessage();
            if (Boolean.TRUE.equals(message.hasText())) {
                String text = message.getText();
                if ("(. Y .) –ü—Ä–∏–≤–µ—Ç".equals(text)) {
                    vk.messages.send()
                            .setPeerId(message.getPeerId())
                            .setMessage("–í—Å–µ–º –ø—Ä–∏–≤–µ—Çü§ë \n –Ø —á–∞—Å—Ç–µ–Ω—å–∫–æ –æ–±–∏—Ç–∞—é –Ω–∞ —Å—Ç—Ä–∏—Ç–µ, –Ω–æ –≤ –¥—É—à–µ –º–æ–µ–π –º–æ–µ–π –≤–æ—Å—å–º—É—Ö–∞‚ô• " +
                                    "\n –∏ –µ—â–µ —è –æ—á–µ–Ω—å –ª—é–±–ª—é –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ ‚ò∫\n\n\n" +
                                    "–Ø –ø–æ–∫–∞ –º–∞–ª–æ —á–µ–≥–æ —É–º–µ—é, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∫–∏–¥–∞—Ç—å –∏–¥–µ–π –∏ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—É—á—É—Å—åü§ó")
                            .execute();
                } else if ("(. Y .) –∫–æ–≥–æ —Ç—ã –ª—é–±–∏—à—å?".equals(text)) {
                    GetConversationMembers.ResponseBody execute = vk.messages.getConversationMembers()
                            .setPeerId(message.getPeerId())
                            .execute();
                    List<User> profiles = execute.getResponse().getProfiles();
                    Random random = new Random();
                    int randomUser = random.nextInt(profiles.size());
                    User user = profiles.get(randomUser);
                    vk.messages.send()
                            .setPeerId(message.getPeerId())
                            .setMessage("–Ø –ø—Ä–æ—Å—Ç–æ –æ–±–æ–∂–∞—é @" + user.getScreen_name() + "‚ô•ü•∞üòç")
                            .execute();

                } else if ("(. Y .) –î–∞–π –µ–∑–∂–∏".equals(text)) {
                    GetConversationMembers.ResponseBody execute = vk.messages.getConversationMembers()
                            .setPeerId(message.getPeerId())
                            .execute();
                    List<User> profiles = execute.getResponse().getProfiles();
                    Random random = new Random();
                    int randomUser = random.nextInt(profiles.size());
                    User user = profiles.get(randomUser);
                    vk.messages.send()
                            .setPeerId(message.getPeerId())
                            .setMessage("–î–æ–ª–±–∞–µ–± –¥–Ω—è @" + user.getScreen_name())
                            .execute();

                } else if (text.contains("(. Y .) repeat ")) {
                    String replaced = text.replace("(. Y .) repeat ", "");
                    for (int i = 0; i < 5; i++) {
                        vk.messages.send()
                                .setPeerId(message.getPeerId())
                                .setMessage("@all " + replaced)
                                .execute();
                        Thread.sleep(5000);
                    }
                } else if (text.contains("(. Y .) –≥–æ—Ä–æ–¥–∞ –æ—Ç—á–∏—Å—Ç–∏—Ç—å")) {
                    citiesInGame.clear();
                    vk.messages.send()
                            .setPeerId(message.getPeerId())
                            .setMessage("–°–ø–∏—Å–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç—á–∏—â–µ–Ω—ã üèô")
                            .execute();
                    Thread.sleep(5000);
                    } else if (text.contains("(. Y .) –≥–æ—Ä–æ–¥–∞")) {
                    String city = text.replace("(. Y .) –≥–æ—Ä–æ–¥–∞ ", "");
                    String beforeCity = "";
                    String substring = "";
                    if (!citiesInGame.isEmpty()) {
                        beforeCity = citiesInGame.get(citiesInGame.size() - 1);
                        substring = beforeCity.substring(beforeCity.length() - 1);
                        if (substring.equals("—å") || substring.equals("—ä") || substring.equals("—ã")) {
                            substring = beforeCity.substring(beforeCity.length() - 2, beforeCity.length() - 1);
                        }
                    }
                    if (!beforeCity.isEmpty() && !substring.isEmpty() && !city.startsWith(substring.toUpperCase())) {
                        vk.messages.send()
                                .setPeerId(message.getPeerId())
                                .setMessage("–ë—É–∫–æ–≤–∫–∞ —Ç–∞ –Ω–µ —Ç–∞ ü§ì")
                                .execute();
                        return;
                    }
                    CitiesBase citiesBase = CitiesBase.getInstance();
                    if (citiesInGame.contains(city)) {
                        vk.messages.send()
                                .setPeerId(message.getPeerId())
                                .setMessage("–ê –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –∑–∞–ø—Ä–µ—â–µ–Ω–æ! ü•∂")
                                .execute();
                    } else if (CitiesBase.contains(city)) {
                        citiesInGame.add(city);
                        for (Iterator<String> it = CitiesBase.iterator(); it.hasNext(); ) {
                            String cityForUser = it.next();
                            if (cityForUser.startsWith(city.substring(city.length() - 1).toUpperCase()) && !citiesInGame.contains(cityForUser)) {
                                citiesInGame.add(cityForUser);
                                vk.messages.send()
                                        .setPeerId(message.getPeerId())
                                        .setMessage(cityForUser)
                                        .execute();
                                break;
                            }
                        }

                    } else {
                        vk.messages.send()
                                .setPeerId(message.getPeerId())
                                .setMessage("–ù–µ—Ç, —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! üíÄ")
                                .execute();
                    }
                }
            }
        } catch (VkApiException | InterruptedException e) {
            throw new RuntimeException(e);
        }
        super.onMessageNew(messageNew);
    }

    @Override
    public String getAccessToken() {
        return "vk1.a.t-8E_fXRH9p0c9sVc8D22RUtiV7lgUycRNd-zNi_GLiV0AD0kVjNYq8lrUZLx_YOASOLcYm70RaMQ5DHJCwI7ZtQKajU8ll4mUQ3gLgqvaVj91Lx5--lgtcXEkOowFoveHd8l5BeFN94aMSJ7YkaekSIA1zTd9d5vpWijkRF4kES8uC3LIFiw7sdeqXOKzE0";
    }

    public static void main(String[] args) throws VkApiException {
        new StreetBot().startPolling();
    }

}
